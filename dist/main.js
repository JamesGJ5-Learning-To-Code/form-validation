(()=>{var t={902:t=>{t.exports={countryZipCodeMap:{ch:"^(CH-)?\\d{4}$",fr:"^(F-)?\\d{5}$",de:"^(D-)?\\d{5}$",nl:"^(NL-)?\\d{4}\\s*([A-RT-Z][A-Z]|S[BCE-RT-Z])$"}}}},s={};function e(a){var i=s[a];if(void 0!==i)return i.exports;var r=s[a]={exports:{}};return t[a](r,r.exports,e),r.exports}(()=>{"use strict";class t{constructor(t){this.errorMessageDisplayer=t}set errorMessage(t){this.displayErrorMessage(t),t?this.activate():this.deactivate()}displayErrorMessage(t){this.errorMessageDisplayer.textContent=t}activate(){this.errorMessageDisplayer.classList.add("active")}deactivate(){this.errorMessageDisplayer.classList.remove("active")}}class s{constructor(s,e){this.control=s,this.messageWhenInvalid="Invalid",this.errorHandler=new t(e),this.initialiseControl()}initialiseControl(){this.doValidityChecks=this.doValidityChecks.bind(this),this.control.addEventListener("focus",this.doValidityChecks),this.control.addEventListener("input",this.doValidityChecks)}doValidityChecks(){this.control.checkValidity()?this.cancelError():this.displayError()}displayError(){this.errorHandler.errorMessage=this.messageWhenInvalid}cancelError(){this.errorHandler.errorMessage=""}}class a extends s{constructor(t,s){super(t,s),this.messageWhenInvalid="A valid email address is required"}}class i extends s{constructor(t,s){super(t,s),this.messageWhenInvalid="A country selection is required"}}var r=e(902);class o extends s{constructor(t,s){super(t,s),this.messageWhenInvalid="A valid zip code is required",this.countryZipCodeMap=r.countryZipCodeMap,this.activateCountryChangeDetector()}doValidityChecks(){const t=this.control.value,s=this.getCountry();this.checkPattern(s,t),super.doValidityChecks()}getCountry(){return this.getCountryControl().value}getCountryControl(){return this.control.closest("form").querySelector(".country")}checkPattern(t,s){t in this.countryZipCodeMap&&(new RegExp(this.countryZipCodeMap[t]).test(s)?this.control.setCustomValidity(""):this.control.setCustomValidity(this.messageWhenInvalid))}activateCountryChangeDetector(){const t=this.getCountryControl();t&&(this.doValidityChecks=this.doValidityChecks.bind(this),t.addEventListener("input",this.doValidityChecks))}}class d extends s{constructor(t,s){super(t,s),this.messageWhenInvalid="An 8-16 character password is required with at least one of each of: a digit, a lowercase letter, an uppercase letter and a special character."}}class n extends s{constructor(t,s,e){super(t,e),this.messageWhenInvalid="The passwords do not match",this.passwordInput=s,this.activatePasswordChangeDetector()}doValidityChecks(){this.control.value===this.passwordInput.value?this.control.setCustomValidity(""):this.control.setCustomValidity(this.messageWhenInvalid),super.doValidityChecks()}activatePasswordChangeDetector(){this.doValidityChecks=this.doValidityChecks.bind(this),this.passwordInput.addEventListener("input",this.doValidityChecks)}}class c{constructor(s,e,a){this.submissionButton=s,this.validatedElements=e,this.errorHandler=new t(a)}}class l{static validatedElements=[];static loadValidators(){l.processInput("email"),l.processInput("country"),l.processInput("zip-code"),l.processInput("password"),l.processInput("confirm-password")}static processInput(t){const s=document.getElementById(t),e=document.getElementById(`${t}-error-message`);switch(l.validatedElements.push(s),t){case"email":l.loadEmailValidator(s,e);break;case"country":l.loadCountryValidator(s,e);break;case"zip-code":l.loadZipCodeValidator(s,e);break;case"password":l.loadPasswordValidator(s,e);break;case"confirm-password":const t=document.getElementById("password");l.loadConfirmPasswordValidator(s,t,e)}}static loadEmailValidator(t,s){new a(t,s)}static loadCountryValidator(t,s){new i(t,s)}static loadZipCodeValidator(t,s){new o(t,s)}static loadPasswordValidator(t,s){new d(t,s)}static loadConfirmPasswordValidator(t,s,e){new n(t,s,e)}static loadSubmissionGate(t,s){new c(t,l.validatedElements,s)}}document.addEventListener("DOMContentLoaded",l.loadValidators)})()})();